AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  nibble-lambda

  Sample SAM Template for nibble-lambda

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5
    MemorySize: 128
    Runtime: go1.x
    Architectures:
    - x86_64
    Tracing: Active

  Api:
    TracingEnabled: true
Resources:
  ChitChatApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: staging
      # OpenApiVersion: 3.1.0
  CCAuthority:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        DefaultAuthorizer: ChitChatCognito
        Authorizers:
          CCAuthorizer:
            UserPoolArn: arn:aws:cognito-idp:us-east-2:217500390115:userpool/us-east-2_9mcnGjYuh
  CCAuthorization:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: authorization/
      Handler: main:main
      Events:
        Type: HttpApi
        Properties:
          ApiId: !Ref CCAuthority
          Path: /Auth
          Method: POST
          Auth:
            Authorizaer: ChitChatCognito
  ChitChatFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: chitchat/
      Handler: main:main
      Events:
        CatchAll:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /chitchat
            Method: GET
            ApiId:
              Ref: ChitChatApi
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          PARAM1: VALUE
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: itemId
          AttributeType: S
      KeySchema:
        - AttributeName: itemId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      BillingMode: PAY_PER_REQUEST
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  ChitChatApi:
    Description: API Gateway endpoint URL for Prod environment for First Function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  ChitChatFunction:
    Description: First Lambda Function ARN
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value: !GetAtt HelloWorldFunctionRole.Arn
